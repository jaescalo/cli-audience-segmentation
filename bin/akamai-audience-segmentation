#!/usr/bin/env python

# Copyright 2017 Akamai Technologies, Inc. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import requests, json, sys, os
from akamai.edgegrid import EdgeGridAuth,EdgeRc
import urllib
import argparse
from termcolor import colored
from pygments import highlight, lexers, formatters
import logging

if sys.version_info[0] < 3:
    from urlparse import urljoin
else:
    from urllib.parse import urljoin


class MyArgumentParser(argparse.ArgumentParser):
    def error(self, message):
        self.print_help(sys.stderr)
        self.exit(0, '%s: error: %s\n' % (self.prog, message))


# Function to get the groupId
def get_groupId():
    print('\n*** Calling the Audience Segmentation Cloudlet API to get the groupId ***\n')
    response = session.get(urljoin(baseurl, '/cloudlets/api/v2/group-info'))
    response = json.loads(response.text)
    groupId = str(response[0]['groupId'])
    print('groupId:',groupId)
    get_cloudletId(groupId)
    return()


# Function to get the cloudletId
def get_cloudletId(groupId):
    print('\n*** Calling the Audience Segmentation Cloudlet API to get the cloudletId ***\n')
    response = session.get(urljoin(baseurl, '/cloudlets/api/v2/cloudlet-info?gid=' + groupId))
    response = json.loads(response.text)
    for key in response:
        if key['cloudletName'] == 'AUDIENCESEGMENTATION':
            cloudletId = str(key['cloudletId'])
    print('cloudletId: ',cloudletId)
    get_policyId(groupId, cloudletId)
    return()


# Get the policyId and Staging Version
def get_policyId(groupId, cloudletId):
    global policyId
    print('\n*** Calling the Audience Segmentation Cloudlet API to get the policyId ***\n')
    response = session.get(urljoin(baseurl, '/cloudlets/api/v2/policies?gid=' + groupId + '&includeDeleted=false&cloudletId=' + cloudletId))
    response = json.loads(response.text)
    policyId='Policy Not Found'
    for key in response:
        if key['name'] == policyName:
            policyId = str(key['policyId'])
            # Get the last active STAGING|PROD version
            version = str(key['activations'][0]['policyInfo']['version'])
    print('policyId: ',policyId)
    print('Based on Staging version: ',version)
    clone_policyId_version(policyId, version)
    return()


# Clone the last active version in STAGE|PROD and save the output for later modifications. For example, if the active version in staging is higher than the one in prod then the staging one will be the baseline.
def clone_policyId_version(policyId, version):
    print('\n*** Creating new policy "' + policyName + '" based on version ' + version + ' ***\n')
    headers = {'content-type': 'application/json'}
    # Convert the json object to a string that the API can interpret
    based_on_version = 'Based on version ' + version
    post_body_json = {"description":based_on_version,"matchRuleFormat":"1.0","matchRules":[]}
    post_body = json.dumps(post_body_json, sort_keys=True, indent=4)
    colorful_json = format_json(post_body_json)
    print('POST body for the request:\n', colorful_json)
    request = session.post(urljoin(baseurl, '/cloudlets/api/v2/policies/' + policyId + '/versions?cloneVersion=' + version), data=post_body, headers=headers)
    request = json.loads(request.text)
    # Pretty print
    colorful_json = format_json(request)
    print('Response body from the new cloned version:\n',colorful_json,'\n')
    #request ={"activations":[],"createDate":1520004856647,"createdBy":"bmv3bs6m5s2ixbip","deleted":"false","description":"API Call. Clone Policy for Rule edits.","lastModifiedBy":"bmv3bs6m5s2ixbip","lastModifiedDate":1520004856647,"location":"/cloudlets/api/v2/policies/31646/versions/9","matchRuleFormat":"1.0","matchRules":[{"akaRuleId":"e4f2bbb96f534931","end":0,"forwardSettings":{"originId":"Charter2"},"id":0,"location":"/cloudlets/api/v2/policies/31646/versions/9/rules/e4f2bbb96f534931","matches":[{"caseSensitive":"false","matchOperator":"equals","matchType":"range","negate":"false","objectMatchValue":{"type":"range","value":[80,100]}}],"name":"Test Rule #2","start":0,"type":"asMatchRule"},{"akaRuleId":"916f453b14bc51ef","end":0,"forwardSettings":{"originId":"Charter1"},"id":0,"location":"/cloudlets/api/v2/policies/31646/versions/9/rules/916f453b14bc51ef","matches":[{"caseSensitive":"false","matchOperator":"equals","matchType":"range","negate":"false","objectMatchValue":{"type":"range","value":[1,50]}},{"caseSensitive":"false","matchOperator":"contains","matchType":"path","matchValue":"/A/*","negate":"false"}],"name":"Test Rule #1","start":0,"type":"asMatchRule"}],"policyId":31646,"revisionId":1324100,"rulesLocked":"false","version":9}
    #colorful_json = format_json(request)
    print('\n',colorful_json,'\n')
    get_akaRuleId(request)
    return()


# Get the rule details. There are 2 options, use the previous output to build the rule structure, or run an API to the akaRuleID endpoint to get the details. We'll go with option 1
def get_akaRuleId(request):
    global akaRuleId, new_version
    print('\n*** Collecting information from the cloned version and rule: ' + rule_name + ' ***\n')
    new_version = str(request['version'])
    current_range = [ ]
    for key in request['matchRules']:
        if key['name'] == rule_name:
            akaRuleId = key['akaRuleId']
            originId = key['forwardSettings']['originId']
            for key_2 in key['matches']:
                if key_2['matchType'] == 'range':
                    rule_to_edit = key
                    for current_range_value in key_2['objectMatchValue']['value']:
                        current_range.append(current_range_value)
    
    print('New version: ', new_version)
    print('akaRuleId: ', akaRuleId)
    print('originId: ', originId)
    print('range: ', current_range, '\n')
    colorful_json = format_json(rule_to_edit)
    print('Rule to edit: \n', colorful_json)

    edit_rule(rule_to_edit, new_version)
    return()


# Make the modifications to the downloaded rule JSON for the next PUT API call
def edit_rule(rule_to_edit, new_version):
    print('\n*** Making edits to the rule: ' + rule_name + ' ***\n')
    # Remove the location key which is not allowed by our next API call
    del rule_to_edit['location']
    # Modify the range with the users's provided values
    n = 0
    for key in rule_to_edit['matches']:
        if key['matchType'] == 'range':
            rule_to_edit['matches'][n]['objectMatchValue']['value'][0] = new_weights[0]
            rule_to_edit['matches'][n]['objectMatchValue']['value'][1] = new_weights[1]    
        n = n+1
    
    # Convert json to string to push to the API endpoint
    colorful_json = format_json(rule_to_edit)
    print(colorful_json)
    push_new_rule(rule_to_edit, new_version)
    return()


# Push the new rule
def push_new_rule(rule_to_edit, new_version):
    print('\n*** Pushing the updated rule ***\n')
    rule_to_edit = json.dumps(rule_to_edit, sort_keys=True, indent=4)
    headers = {'content-type': 'application/json'}
    # Convert the json object to a string that the API can interpret
    request = session.put(urljoin(baseurl, '/cloudlets/api/v2/policies/' + policyId + '/versions/' + new_version + '/rules/' + akaRuleId), data=rule_to_edit, headers=headers)
    # Pretty print
    request = json.loads(request.text)
    colorful_json = format_json(request)
    #print(colorful_json)
    logging.info('JSON BODY', colorful_json)
    return()


# Policy activation
def activate_policy(activation_network):
    print('\n*** Activating Policy ***\n')
    headers = {'content-type': 'application/json'}
    # JSON body for the request which only specifies the activation network staging|prod
    post_body = {"network":activation_network}
    post_body = json.dumps(post_body, sort_keys=True, indent=4)
    request = session.post(urljoin(baseurl, '/cloudlets/api/v2/policies/' + policyId + '/versions/' + new_version + '/activations'), data=post_body, headers=headers)
    request = json.loads(request.text)
    colorful_json = format_json(request)
    print(colorful_json)
    return()


# JSON body formatting and coloring
def format_json(json_body):
    json_body = json.dumps(json_body, sort_keys=True, indent=4)
    json_body = highlight(json_body, lexers.JsonLexer(), formatters.TerminalFormatter())
    return(json_body)


def init_config(edgerc_file, section):
    global baseurl, session
    print(os.getenv("AKAMAI_EDGERC"))
    print(os.getenv("AKAMAI_EDGERC_SECTION"))
    # Check if the edgerc_file variable or the AKAMAI_EDGERC env var exist then use a default value if they don't exist.
    if not edgerc_file:
        if not os.getenv("AKAMAI_EDGERC"):
            edgerc_file = os.path.join(os.path.expanduser("~"), '.edgerc')
        else:
            edgerc_file = os.getenv("AKAMAI_EDGERC")

    if not os.access(edgerc_file, os.R_OK):
        print("Unable to read edgerc file \"%s\"" % edgerc_file)
        exit(1)

    if not section:
        if not os.getenv("AKAMAI_EDGERC_SECTION"):
            section = "cloudlets"
        else:
            section = os.getenv("AKAMAI_EDGERC_SECTION")

    try:
        edgerc = EdgeRc(edgerc_file)
        baseurl = 'https://%s' % edgerc.get(section, 'host')

        session = requests.Session()
        session.auth = EdgeGridAuth.from_edgerc(edgerc, section)

        return(baseurl, session)

    except configparser.NoSectionError:
        print("Edgerc section \"%s\" not found" % section)
        exit(1)
    except Exception:
        print("Unknown error occurred trying to read edgerc file (%s)" % edgerc_file)
        exit(1)


def main():
    parser = MyArgumentParser(
            description='Akamai CLI Audience Segmentation Cloudlet Python Example', add_help=False
    )
    parser.add_argument('--version', action='version')

    subparsers = parser.add_subparsers(title='Commands', dest='command', metavar="")

    create_parser = subparsers.add_parser('help', help='Show available help')
    create_parser = subparsers.add_parser('list', help='Subcommands')
    parser_update = subparsers.add_parser('update', help='Modify target rule', add_help=False)
    
    mandatory = parser_update.add_argument_group('required arguments')
    mandatory.add_argument('--policy', required=True, help='Policy name')
    mandatory.add_argument('--rule', required=True, help='Rule name. Example: \'Test Rule #1\'')
    mandatory.add_argument('--weights', required=True, help='New percentages. Example: \'1,50\'')
    
    optional = parser_update.add_argument_group('optional arguments')
    optional.add_argument('--activate', help='Activate the policy to staging|production')
    optional.add_argument('--edgerc', help='Config file [default: ~/.edgerc]')
    optional.add_argument('--section', help='Config section in .edgerc')
    optional.add_argument('--verbose', action='store_true', help='Enable verbose')

    opts = parser.parse_args()


    if len(sys.argv) <= 1:
        parser.print_help()
        return 0

    if opts.verbose:
        logging.basicConfig(format="%(levelname)s: %(message)s", level=logging.DEBUG)
        logging.info("Verbose output.")
    else:
        logging.basicConfig(format="%(levelname)s: %(message)s")

    logging.info('This should be verbose.')
    logging.warning("This is a warning.")
    logging.error("This is an error.")


    global baseurl, session

    global policyName, rule_name, new_weights
    policyName = opts.policy
    rule_name = opts.rule
    new_weights = opts.weights.split(",")


    if opts.command == 'help':
        parser.print_help()
        return 0

    elif opts.command == 'list':
        parser.print_help()
        return 0
        
    elif opts.command == 'update':
        init_config(opts.edgerc, opts.section)
        get_groupId()

    else:
        # argparse will error on unexpected commands, but
        # in case we mistype one of the elif statements...
        parser.print_help(sys.stderr)

    if opts.activate == 'staging' or opts.activate == 'production':
        activate_policy(opts.activate)


if __name__ == '__main__':
    main()